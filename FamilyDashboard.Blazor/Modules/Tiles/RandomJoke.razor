@inject IRandomJokeService RandomJokeService
@using FamilyDashboard.Blazor.Models

@if (_errorMessage != null)
{
    <p class="m-0">@_errorMessage</p>
}
else if (_setup == null)
{
    <p>Loading a random joke...</p>
}
else
{
    <div @onclick="async () => await FetchJokeTextAsync()">
        <h5 class="text-dark">@_setup</h5>
        <h6 class="text-secondary-emphasis">@_punchLine</h6>
    </div>
}

@code {
    private string? _errorMessage;
    private string? _setup;
    private string? _punchLine;
    private Timer? _timer;

    protected override async Task OnInitializedAsync()
    {
        _timer = new System.Threading.Timer(async _ =>
        {
            await FetchJokeTextAsync();
            await InvokeAsync(StateHasChanged);
        }, null, TimeSpan.Zero, TimeSpan.FromHours(1));

        await base.OnInitializedAsync();
    }

    async Task FetchJokeTextAsync()
    {
        try
        {
            _setup = null;
            var getRandomJokeResponse = await RandomJokeService.GetJokeAsync();
            if (getRandomJokeResponse == null)
            {
                _setup = "";
                return;
            }
            _setup = getRandomJokeResponse.Setup;
            _punchLine = getRandomJokeResponse.Punchline;
        }
        catch
        {
            _errorMessage = "Unable to retrieve a joke.";
        }
    }
}